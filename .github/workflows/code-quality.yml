name: Code Quality

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Generate coverage report
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        npx nyc report --reporter=text >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
    - name: Coverage comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          try {
            const coverage = execSync('npx nyc report --reporter=text').toString();
            const body = `## 🧪 Test Coverage Report\n\n\`\`\`\n${coverage}\n\`\`\`\n\n_Generated by GitHub Actions_`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          } catch (error) {
            console.log('Could not generate coverage comment:', error.message);
          }

  test-matrix:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [unit, integration, visual]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ${{ matrix.test-type }} tests
      run: npm run test:${{ matrix.test-type }}
      env:
        CI: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          test/visual/outputs/actual/
          coverage/
        retention-days: 7

  validate-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate package.json
      run: |
        echo "## Package Validation" >> $GITHUB_STEP_SUMMARY
        echo "✅ package.json is valid JSON" >> $GITHUB_STEP_SUMMARY
        
        # Check required fields
        node -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'description', 'main', 'scripts'];
          const missing = required.filter(field => !pkg[field]);
          if (missing.length > 0) {
            console.log('❌ Missing required fields:', missing.join(', '));
            process.exit(1);
          } else {
            console.log('✅ All required fields present');
          }
        "
        echo "✅ All required package.json fields present" >> $GITHUB_STEP_SUMMARY
        
    - name: Test package installation
      run: |
        npm pack
        npm install -g iobroker-dashboard-cli-*.tgz
        echo "✅ Package installs successfully" >> $GITHUB_STEP_SUMMARY

  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation files
      run: |
        echo "## Documentation Check" >> $GITHUB_STEP_SUMMARY
        
        # Check for README
        if [ -f "README.md" ]; then
          echo "✅ README.md exists" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ README.md missing" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for CHANGELOG
        if [ -f "CHANGELOG.md" ]; then
          echo "✅ CHANGELOG.md exists" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ CHANGELOG.md missing" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check CLAUDE.md
        if [ -f "CLAUDE.md" ]; then
          echo "✅ CLAUDE.md exists (Claude Code instructions)" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ CLAUDE.md missing" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Count spec files
        spec_count=$(find . -name "*_SPEC.md" | wc -l)
        echo "📋 Found $spec_count specification files" >> $GITHUB_STEP_SUMMARY